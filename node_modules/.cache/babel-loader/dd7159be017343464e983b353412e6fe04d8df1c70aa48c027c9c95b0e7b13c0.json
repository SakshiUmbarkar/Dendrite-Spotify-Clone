{"ast":null,"code":"import recentPlayed from './json/recentPlayed.json';\nimport suggestions from './json/suggestions.json';\nimport playlists from './json/playlists.json';\nimport tracks from './json/tracks.json';\nexport const getGreeting = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(suggestions);\n    }, Math.random() * 2 * 1000);\n  });\n};\nexport const getRecentPlayed = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(recentPlayed);\n    }, Math.random() * 3 * 1000);\n  });\n};\nexport const getPlaylists = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(playlists);\n    }, Math.random() * 3 * 1000);\n  });\n};\nexport const getTracks = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(tracks);\n    }, Math.random() * 3 * 1000);\n  });\n};","map":{"version":3,"names":["recentPlayed","suggestions","playlists","tracks","getGreeting","Promise","resolve","reject","setTimeout","Math","random","getRecentPlayed","getPlaylists","getTracks"],"sources":["/Users/sahilchavan/Downloads/spotify-clone-master/src/API.tsx"],"sourcesContent":["import {ICard} from './components/Card'\nimport {ITrack} from './components/Track'\nimport recentPlayed from './json/recentPlayed.json'\nimport suggestions from './json/suggestions.json'\nimport playlists from './json/playlists.json'\nimport tracks from './json/tracks.json'\n\nexport interface ISuggestion {\n  id: number,\n  thumbnail: string,\n  title: string,\n}\n\nexport const getGreeting = (): Promise<Array<ISuggestion>> => {\n  return new Promise<Array<ISuggestion>>((resolve, reject) => {\n    setTimeout(() => {\n      resolve(suggestions)\n    }, Math.random() * 2 * 1000)\n  })\n}\n\nexport const getRecentPlayed = (): Promise<Array<ICard>> => {\n  return new Promise<Array<ICard>>((resolve, reject) => {\n    setTimeout(() => {\n      resolve(recentPlayed)\n    }, Math.random() * 3 * 1000)\n  })\n}\n\nexport const getPlaylists = (): Promise<Array<string>> => {\n  return new Promise<Array<string>>((resolve, reject) => {\n    setTimeout(() => {\n      resolve(playlists)\n    }, Math.random() * 3 * 1000)\n  })\n}\n\nexport const getTracks = (): Promise<Array<ITrack>> => {\n  return new Promise<Array<ITrack>>((resolve, reject) => {\n    setTimeout(() => {\n      resolve(tracks)\n    }, Math.random() * 3 * 1000)\n  })\n}\n"],"mappings":"AAEA,OAAOA,YAAY,MAAM,0BAA0B;AACnD,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,MAAM,MAAM,oBAAoB;AAQvC,OAAO,MAAMC,WAAW,GAAG,MAAmC;EAC5D,OAAO,IAAIC,OAAO,CAAqB,CAACC,OAAO,EAAEC,MAAM,KAAK;IAC1DC,UAAU,CAAC,MAAM;MACfF,OAAO,CAACL,WAAW,CAAC;IACtB,CAAC,EAAEQ,IAAI,CAACC,MAAM,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC;EAC9B,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAA6B;EAC1D,OAAO,IAAIN,OAAO,CAAe,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpDC,UAAU,CAAC,MAAM;MACfF,OAAO,CAACN,YAAY,CAAC;IACvB,CAAC,EAAES,IAAI,CAACC,MAAM,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC;EAC9B,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAA8B;EACxD,OAAO,IAAIP,OAAO,CAAgB,CAACC,OAAO,EAAEC,MAAM,KAAK;IACrDC,UAAU,CAAC,MAAM;MACfF,OAAO,CAACJ,SAAS,CAAC;IACpB,CAAC,EAAEO,IAAI,CAACC,MAAM,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC;EAC9B,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMG,SAAS,GAAG,MAA8B;EACrD,OAAO,IAAIR,OAAO,CAAgB,CAACC,OAAO,EAAEC,MAAM,KAAK;IACrDC,UAAU,CAAC,MAAM;MACfF,OAAO,CAACH,MAAM,CAAC;IACjB,CAAC,EAAEM,IAAI,CAACC,MAAM,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC;EAC9B,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}